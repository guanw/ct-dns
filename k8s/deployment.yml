---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ct-dns-app
spec:
  replicas: 1 #TODO check if there's a way to make load balancer work with kubectl port-forward
  selector:
    matchLabels:
      app: ct-dns
  template:
    metadata:
      labels:
        app: ct-dns
    spec:
      containers:
        - name: ct-dns-container
          image: guanw0826/ct-dns:latest
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service # Type of kubernetes resource
metadata:
  name: ct-dns-app-service # Unique name of the resource
spec:
  type: NodePort # Expose the Pods by opening a port on each Node and proxying it to the service.
  ports: # Take incoming HTTP requests on port 9090 and forward them to the targetPort of 8080
    - name: http
      port: 8080
      targetPort: 8080
    - name: grpc
      port: 50050
      targetPort: 50050
  selector:
    app: ct-dns-app
---
apiVersion: apps/v1 # API version
kind: Deployment
metadata:
  name: redis-master # Unique name for the deployment
  labels:
    app: redis # Labels to be applied to this deployment
spec:
  selector:
    matchLabels: # This deployment applies to the Pods matching these labels
      app: redis
      role: master
      tier: backend
  replicas: 1 # Run a single pod in the deployment
  template: # Template for the pods that will be created by this deployment
    metadata:
      labels: # Labels to be applied to the Pods in this deployment
        app: redis
        role: master
        tier: backend
    spec: # Spec for the container which will be run inside the Pod.
      containers:
        - name: master
          image: redis
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 6379
---
apiVersion: v1
kind: Service # Type of Kubernetes resource
metadata:
  name: redis-master # Name of the Kubernetes resource
  labels: # Labels that will be applied to this resource
    app: redis
    role: master
    tier: backend
spec:
  ports:
    - port: 6379 # Map incoming connections on port 6379 to the target port 6379 of the Pod
      targetPort: 6379
  selector: # Map any Pod with the specified labels to this service
    app: redis
    role: master
    tier: backend
